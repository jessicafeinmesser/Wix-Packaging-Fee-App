{"version":3,"file":"api.mjs","sources":["../../../src/backend/api/packaging-fee-api/api.ts"],"sourcesContent":["// import { auth } from \"@wix/essentials\";\r\n\r\n// let packagingFee: number = 10; // Default packaging fee\r\n\r\n// export async function GET(req: Request) {\r\n//   try {\r\n//     const instanceId = req.headers.get(\"Instance-ID\");\r\n//     if (!instanceId) {\r\n//       return new Response(JSON.stringify({ error: \"Missing instance ID\" }), {\r\n//         status: 400,\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//       });\r\n//     }\r\n\r\n//     // Optional: Validate the instanceId if necessary\r\n//     // For example, check if it matches a known pattern or exists in a database\r\n\r\n//     const responsePayload = { fee: packagingFee };\r\n//     console.log(\"GET response payload:\", responsePayload);\r\n\r\n//     return new Response(JSON.stringify(responsePayload), {\r\n//       status: 200,\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//     });\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching packaging fee:\", error);\r\n//     return new Response(JSON.stringify({ error: (error as Error).message }), {\r\n//       status: 500,\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//     });\r\n//   }\r\n// }\r\n\r\n// export async function POST(req: Request) {\r\n//   try {\r\n//     const instanceId = req.headers.get(\"Instance-ID\");\r\n//     if (!instanceId) {\r\n//       return new Response(JSON.stringify({ error: \"Missing instance ID\" }), {\r\n//         status: 400,\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//       });\r\n//     }\r\n\r\n//     const { fee } = await req.json();\r\n//     console.log(\"Incoming POST request body:\", { fee });\r\n\r\n//     if (typeof fee !== \"number\" || fee < 0) {\r\n//       return new Response(JSON.stringify({ error: \"Invalid fee value\" }), {\r\n//         status: 400,\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//       });\r\n//     }\r\n\r\n//     packagingFee = fee; // Update the global fee\r\n//     console.log(\"Updated packaging fee:\", packagingFee);\r\n\r\n//     const responsePayload = { fee: packagingFee };\r\n//     console.log(\"POST response payload:\", responsePayload);\r\n\r\n//     return new Response(JSON.stringify(responsePayload), {\r\n//       status: 200,\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//     });\r\n//   } catch (error) {\r\n//     console.error(\"Error saving packaging fee:\", error);\r\n//     return new Response(JSON.stringify({ error: (error as Error).message }), {\r\n//       status: 500,\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//     });\r\n//   }\r\n// }\r\n\r\nlet packagingFee: number = 10; // Default packaging fee\r\n\r\nexport async function GET(req: Request) {\r\n  try {\r\n    const responsePayload = { fee: packagingFee };\r\n\r\n    // Log the response structure before sending it\r\n    console.log(\"GET response payload:\", responsePayload);\r\n\r\n    return new Response(JSON.stringify(responsePayload), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching packaging fee:\", error);\r\n    return new Response(JSON.stringify({ error: (error as Error).message }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { fee } = await req.json();\r\n\r\n    // Log the incoming request body for debugging\r\n    console.log(\"Incoming POST request body:\", { fee });\r\n\r\n    if (typeof fee !== \"number\" || fee < 0) {\r\n      return new Response(JSON.stringify({ error: \"Invalid fee value\" }), {\r\n        status: 400,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n    }\r\n\r\n    packagingFee = fee; // Update the global fee\r\n    console.log(\"Updated packaging fee:\", packagingFee);\r\n\r\n    const responsePayload = { fee: packagingFee };\r\n\r\n    // Log the response structure before sending it\r\n    console.log(\"POST response payload:\", responsePayload);\r\n\r\n    return new Response(JSON.stringify(responsePayload), {\r\n      status: 200,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error saving packaging fee:\", error);\r\n    return new Response(JSON.stringify({ error: (error as Error).message }), {\r\n      status: 500,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAwEA,IAAI,YAAuB,GAAA,EAAA;AAE3B,eAAsB,IAAI,GAAc,EAAA;AACtC,EAAI,IAAA;AACF,IAAM,MAAA,eAAA,GAAkB,EAAE,GAAA,EAAK,YAAa,EAAA;AAG5C,IAAQ,OAAA,CAAA,GAAA,CAAI,yBAAyB,eAAe,CAAA;AAEpD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAK,CAAA,SAAA,CAAU,eAAe,CAAG,EAAA;AAAA,MACnD,MAAQ,EAAA,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAmB;AAAA,KAC/C,CAAA;AAAA,WACM,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,iCAAiC,KAAK,CAAA;AACpD,IAAO,OAAA,IAAI,SAAS,IAAK,CAAA,SAAA,CAAU,EAAE,KAAQ,EAAA,KAAA,CAAgB,OAAQ,EAAC,CAAG,EAAA;AAAA,MACvE,MAAQ,EAAA,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAmB;AAAA,KAC/C,CAAA;AAAA;AAEL;AAEA,eAAsB,KAAK,GAAc,EAAA;AACvC,EAAI,IAAA;AACF,IAAA,MAAM,EAAE,GAAA,EAAQ,GAAA,MAAM,IAAI,IAAK,EAAA;AAG/B,IAAA,OAAA,CAAQ,GAAI,CAAA,6BAAA,EAA+B,EAAE,GAAA,EAAK,CAAA;AAElD,IAAA,IAAI,OAAO,GAAA,KAAQ,QAAY,IAAA,GAAA,GAAM,CAAG,EAAA;AACtC,MAAO,OAAA,IAAI,SAAS,IAAK,CAAA,SAAA,CAAU,EAAE,KAAO,EAAA,mBAAA,EAAqB,CAAG,EAAA;AAAA,QAClE,MAAQ,EAAA,GAAA;AAAA,QACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAmB;AAAA,OAC/C,CAAA;AAAA;AAGH,IAAe,YAAA,GAAA,GAAA;AACf,IAAQ,OAAA,CAAA,GAAA,CAAI,0BAA0B,YAAY,CAAA;AAElD,IAAM,MAAA,eAAA,GAAkB,EAAE,GAAA,EAAK,YAAa,EAAA;AAG5C,IAAQ,OAAA,CAAA,GAAA,CAAI,0BAA0B,eAAe,CAAA;AAErD,IAAA,OAAO,IAAI,QAAA,CAAS,IAAK,CAAA,SAAA,CAAU,eAAe,CAAG,EAAA;AAAA,MACnD,MAAQ,EAAA,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAmB;AAAA,KAC/C,CAAA;AAAA,WACM,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,+BAA+B,KAAK,CAAA;AAClD,IAAO,OAAA,IAAI,SAAS,IAAK,CAAA,SAAA,CAAU,EAAE,KAAQ,EAAA,KAAA,CAAgB,OAAQ,EAAC,CAAG,EAAA;AAAA,MACvE,MAAQ,EAAA,GAAA;AAAA,MACR,OAAA,EAAS,EAAE,cAAA,EAAgB,kBAAmB;AAAA,KAC/C,CAAA;AAAA;AAEL;;;;"}